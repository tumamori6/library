[Positive]

@theme
-nonmember to free
-free to pay
-unit_price up

@nonmember to free #新規登録率
-登録導線精査
 ...ステップを減らす
	...クレジット登録で無料ポイント付与
-コンテンツを増やす(コンテンツマーケット)/より多く見せる(メイン+サブ)
-コンテンツの閲覧に制限を設ける
-広告媒体最適化
-ページ速度改善

@free to pay #新規入金
-レコメンド
-訴求強化(続きを見るリンク、特典プッシュ、お得感演出、無料ポイント)
-情報量の最適化(コンテンツ以外は減らす)

@unit_price up #入金単価
-レコメンド(サイト内)
-レコメンド(メール配信)
-コンテンツを増やす(コンテンツマーケット)/より多く見せる(メイン+サブ)

@number of accsess #新規アクセス数
-

@指標
-クリック率
-月間/週間/日間アクティブユーザー
#アクティブユーザー...期間内でサービスを1回以上利用したユーザー

@UI関連
-トップ
 タブ切替 縦に一覧表示

-

@UI関連 


@協調フィルタリング  ユーザー間とアイテム間を併用
-レコメンドの精度が悪い
　→複数の行動履歴、項目毎の重みづけ、ページ毎の運用変更
  ・ユーザーがアイテムの商品詳細ページを閲覧した際（閲覧ベース）
  ・ユーザーがアイテムをカートに入れるなど、アイテムに興味を示した行動を取った際（興味ベース）
  ・ユーザーがアイテムを購入した際（購入ベース）
		・検索ワードとの結び付け
-レコメンドに偏りがある
　→レコメンドスコアを再評価(A ~ E)、レコメンドの割合を再設定
　→時間軸の重みづけ(対応済み)
　→ユーザーの嗜好とは判断できないものについても除外
  ・レコメンド機能を介した画面遷移での閲覧履歴
  ・同一アドレスから同一アイテムに対する短時間でのアクセスやクローラー等のアクセス
		→基本は偏りのまま/偏りなしの場合は同一カテゴリ/視聴、購入履歴ないもののみrecommend->setRating
-関連性のないカテゴリからレコメンドされる
　→カテゴリフィルタを利用
-意図的なレコメンドができない
　→任意フラグ

...将来的には
お気に入り/いいねも追加し精度を向上させる


[Negative]
-事故を減らす #テスト環境/検証環境/本番環境の改善
-集客媒体の依存を減らす #テスト環境/検証環境/本番環境の改善



@Example UI改善 レコメンドエンジン ABテスト
- target 登録済み未入金ユーザー
- ABテスト用cokkie発行
  - idが偶数 -> a
		- idが奇数 -> b
		- 登録したらフラグ追加、フラグあれば表示
#maxmemory-policy allkeys-random: 新しく追加されたキーのための空間を確保するために、キーをランダムに削除

@python_n段階評価の場合
購入20 > いいね10 > 視聴1
-各種データ保存は hash型
-hashからobject形式に変換
#計算部分のコード量 少ないし見やすい
#https://qiita.com/hik0107/items/96c483afd6fb2f077985

@機械学習手法_コスト_利益_トレードオフ
-協調型フィルタリングのカスタマイズで十分
-徐々にフィルタリングデータを蓄積する基盤(BigQuery)を作る
-チーム内で勉強は続ける
# -理想は実働半分/インプット半分

@recommendSystemFlow
-(php)getRating(php / 各購入完了ページ)、上限100 -> 追々cloud
-(php)1日1回全アイテムidをキャッシュ(必要であれば購入0も1日1回)、新しいアイテムが追加されたらキャッシュに追加する
-(python)cronで全アイテム*全ユーザーの類似性を計算(setRaiting)
-(python)itemとレコメンドitemのデータリストをhash型、あるいはitemとレコメンドの組み合わせをリスト型でキャッシュ
-(php)フロントで出す

item:100,000
user:100

@ApploachKind
-暗黙 購入,視聴 ← バラつきなし 
-暗黙 クリック ← バラつきなし
-明示 評価 ← バラつきあり

@GA4_BigQuery_Dataportal
数字データはBigQueryに集約させていく
Dataportalで可視化させBiツールとして利用
-低コスト 
-拡張性
※クエリ処理でスキャンするデータ量を抑える必要あり

@Recommendation AI
-ec向けのai
-abテストで通常とどちらが精度が高いか比較

@UI change
一気にリニューアルではなくプチリニューアルを繰り返して最終的に全面リニューアル
# ソシャゲーなどを例に上げれると、使い慣れたボタン配置や画面が、もっと使いやすくなるからという運営側のエゴで一気に全部リニューアルをかけられると、ユーザーはまた一からボタン配置や動作・画面などを覚えなくてはいけないストレスになる

@annalitics_Dataportal
-EC拡張 有効化
-click {label_name} item_id 追加 ...label_name:view/cart_in/buy
-BIツールとしてKPIの可視化
-ABテストの結果をリアルタイムで表示